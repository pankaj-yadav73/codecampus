// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  clerkUserId String   @unique
  email       String?
  name        String?
  image       String?
  role        String   @default("student") @db.VarChar(12)
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  courses     Course[]
  notes       Note[]
  community   Community[]
  tweets      Tweet[]
  ideSessions IdeSession[]
  comments    Comment[]
  likes       Like[]

  @@map("users")
}

model Course {
  id           String   @id @default(uuid())
  title        String   @db.VarChar(500)
  description  String?
  image        String?
  videoFile    String?
  instructorId String?  @map("instructor_id")
  updatedAt    DateTime @default(now()) @map("updated_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  instructor  User?        @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  notes       Note[]
  community   Community[]
  ideSessions IdeSession[]
  comments    Comment[]
  likes       Like[]

  @@map("courses")
}

model Note {
  id        String   @id @default(uuid())
  courseId  String   @map("course_id")
  userId    String   @map("clerkUserId")
  content   String?
  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Community {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  content   String?
  image     String?
  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  tweets Tweet[]
  likes  Like[]

  @@map("community")
}

model Tweet {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  communityId Int      @map("community_id")
  content     String?
  image       String?  @db.Text
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@map("tweets")
}

model IdeSession {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  courseId    String?  @map("course_id")
  sessionData String?
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)

  @@map("ideSessions")
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  courseId  String   @map("course_id")
  content   String
  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id          Int      @id @default(autoincrement())
  userId      String   @map("user_id")
  communityId Int      @map("community_id")
  courseId    String   @map("course_id")
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("likes")
}
